context Project
  inv uniqueId:
    Project.allInstances()->forAll(p1, p2 | p1 <> p2 implies p1.id <> p2.id)

  inv validTitle:
    self.title.size() > 0

  inv validDateRange:
    self.endDate > self.startDate

  inv startDateExists:
    not self.startDate.oclIsUndefined()

  inv endDateExists:
    not self.endDate.oclIsUndefined()

  inv chronologicalHistory:
    self.history->asSequence() = self.history->asOrderedSet()->sortedBy(h | h.date)

  inv noTasksWithSameId:
    self.task->isUnique(id)

  inv allTasksHaveTitles:
    self.task->forAll(t | t.title.size() > 0)

  inv limitHighPriorityTasks:
    self.task->select(t | t.priority = Priority::High)->size() <= 5

  inv uniqueTasksInSprints:
    -- Each task should appear in at most one sprint
    self.sprints->forAll(s1, s2 |
      s1 <> s2 implies s1->intersection(s2)->isEmpty()
    )

context Project::addTask(task : Task)
  pre taskExists:
    not task.oclIsUndefined()

  pre taskNotAlreadyAdded:
    not self.task->includes(task)

  pre taskDeadlineWithinProject:
    task.dueDate.oclIsUndefined() or task.dueDate <= self.endDate

  post taskAdded:
    self.task->includes(task)

  post taskSizeIncrease:
    self.task->size() = self.task@pre->size() + 1

context Project::removeTask(task : Task)
  pre taskExists:
    not task.oclIsUndefined()

  pre taskIsInProject:
    self.task->includes(task)

  post taskIsRemoved:
    not self.task->includes(task) and
    self.task->size() = self.task@pre->size() - 1

context Project::logAction(action : String)
  pre actionNotExists:
    not self.history->includes(Tuple{date = 20222, action = 'Create'})

  post actionAdded:
    self.history->includes(Tuple{date = 20222, action = 'Create'})

context Project::addTaskToSprint(task : Task, sprintIndex : Integer)
  pre taskBelongsToProject:
    self.task->includes(task)

  pre validSprintIndex:
    sprintIndex >= 1 and sprintIndex <= self.sprints->size()

  pre taskNotInAnySprintYet:
    self.sprints->forAll(sprint | not sprint->includes(task))

  post taskAddedToSprint:
    self.sprints->at(sprintIndex)->includes(task)

  post otherSprintsUnchanged:
    Sequence{1..self.sprints->size()}->excluding(sprintIndex)->forAll(i |
      self.sprints->at(i) = self.sprints@pre->at(i)
    )

context Project::removeTaskFromSprint(task : Task, sprintIndex : Integer)
  pre validSprintIndex:
    sprintIndex >= 1 and sprintIndex <= self.sprints->size()

  pre taskInSpecifiedSprint:
    self.sprints->at(sprintIndex)->includes(task)

  post taskRemovedFromSprint:
    not self.sprints->at(sprintIndex)->includes(task)

  post otherSprintsUnchanged:
    Sequence{1..self.sprints->size()}->excluding(sprintIndex)->forAll(i |
      self.sprints->at(i) = self.sprints@pre->at(i)
    )

context Project::createNewSprint() : Integer
  post sprintCreated:
    self.sprints->size() = self.sprints@pre->size() + 1

  post newSprintIsEmpty:
    self.sprints->at(self.sprints->size())->isEmpty()

  post returnsNewSprintIndex:
    result = self.sprints->size()
