model Untangle

-- ==============================
-- ENUMERATIONS
-- ==============================

enum Priority {Low, Medium, High}

enum Status {Open, InProgress, Done}

-- ==============================
-- CLASSES
-- ==============================

class Date
attributes
  -- stores date in days since epoch (Jan 1, 1970)
  now: Integer
operations
  init(d: Integer)

  -- Returns the year (4 digits)
  year() : Integer = 1970 + (self.now div 365)

  -- Returns the month (1-12)
  month() : Integer =
    let dayOfYear: Integer = self.now - ((self.year() - 1970) * 365)
    in
      (dayOfYear * 12 div 365) + 1

  -- Returns the day of month (1-31)
  day() : Integer =
    let dayOfYear: Integer = self.now - ((self.year() - 1970) * 365),
        monthVal: Integer = self.month(),
        daysBeforeMonth: Integer = ((monthVal - 1) * 365) div 12
    in
      dayOfYear - daysBeforeMonth
end

class Note
attributes
  text: String
  createdAt: Integer
  updatedAt: Integer
end

class Project
attributes
  id: String
  title: String
  description: String
  startDate: Integer
  endDate: Integer
operations
  addTask(task: Task)
  removeTask(task: Task)
end

class Task
attributes
  id: String
  title: String
  description: String
  priority: Priority
  status: Status
  dueDate: Integer
operations
  changeStatus(status: Status)
  changePriority(priority: Priority)
  setDueDate(dueDate: Integer)
  isOverdue(): Boolean
  assignToProject(project: Project)
  removeFromProject(project: Project)
end

class User
attributes
  id: String
  name: String
  email: String
end

-- ==============================
-- ASSOCIATIONS
-- ==============================

association Owns between
  User [*] role owner
  Task [1] role ownedBy
end

association Manages between
  User [*] role manager
  Project [1] role managedBy
end

association Contains between
  Task [*] role task
  Project [0..1] role project
end

-- ==============================
-- CONSTRAINTS
-- ==============================

constraints

context Project inv idRequired:
  self.id <> null and self.id <> ''

context Task inv idRequired:
  self.id <> null and self.id <> ''

context Task inv uniqueID:
  Task.allInstances()->
    forAll(t1, t2 | t1 <> t2 implies t1.id <> t2.id)

context Task inv validTitle: self.title.size() > 0

context Task :: changeStatus(status: Status)
  post: self.status = status

context Task :: changePriority(priority: Priority)
  post: self.priority = priority

context Task :: setDueDate(dueDate: Integer)
  post: self.dueDate = dueDate

context Task :: isOverdue(): Boolean
  pre: self.dueDate <> null
  post: let currentDate: Date = Date.allInstances()->any(d | d.now = 20199),
        taskDate: Integer = self.dueDate
        in
        result = currentDate.now > taskDate

context Task :: assignToProject(project: Project)
  pre: project.isDefined()
  post: self.project = project
  post: project.task->includes(self)

context Task :: removeFromProject(project: Project)
  pre: project.isDefined()
  pre: project.task->includes(self)
  post: project.task->excludes(self)

context User inv idRequired: self.id <> null and self.id <> ''

context User inv emailRequired: self.email <> null and self.email <> ''

